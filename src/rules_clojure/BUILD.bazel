package(default_visibility = ["//visibility:public"])

load("//:rules.bzl", "clojure_library", "clojure_library_bootstrap", "clojure_binary")

exports_files(glob(["*.clj"]))

worker_srcs = ["jar.clj", "fs.clj", "compile.clj", "worker.clj", "parse.clj"]
worker_deps = ["@rules_clojure_maven//:org_clojure_clojure",
               "@rules_clojure_maven//:org_clojure_spec_alpha",
               "@rules_clojure_maven//:org_clojure_core_specs_alpha",
               "@rules_clojure_maven//:org_clojure_tools_namespace",
               "@rules_clojure_maven//:org_clojure_java_classpath",
               "@rules_clojure_maven//:org_clojure_data_json",
               "@rules_clojure_maven//:org_projectodd_shimdandy_shimdandy_api",
               "@rules_clojure_maven//:org_projectodd_shimdandy_shimdandy_impl"]

java_binary(
    name="worker-bootstrap",
    resources=worker_srcs,
    main_class="clojure.main",
    jvm_flags=["-Dclojure.main.report=stderr"],
    resource_strip_prefix="src",
    runtime_deps=worker_deps)

clojure_library_bootstrap(
    name="worker-lib",
    srcs=worker_srcs,
    resources=["compile.clj"],
    aot=["rules-clojure.worker",
         "rules-clojure.jar",
         "rules-clojure.fs",
         "rules-clojure.parse",
         "clojure.data.json",
         "clojure.java.classpath",

         "clojure.tools.reader.default-data-readers",
         "clojure.tools.reader.impl.commons",
         "clojure.tools.reader.impl.inspect",
         "clojure.tools.reader.impl.errors",
         "clojure.tools.reader.impl.utils",
         "clojure.tools.reader.reader-types",
         "clojure.tools.reader",
         "clojure.tools.namespace.parse",
         "clojure.tools.namespace.dependency",
         "clojure.tools.namespace.track",
         "clojure.tools.namespace.file",
         "clojure.tools.namespace.find"],
    resource_strip_prefix="src",
    deps=worker_deps)

java_binary(name="worker",
            main_class="clojure.main",
            jvm_flags=["-Dclojure.main.report=stderr"],
            runtime_deps=["worker-lib"])

clojure_library(
    name= "libgen_build",
    srcs=["gen_build.clj", "fs.clj"],
    resource_strip_prefix = "src",
    deps=["@rules_clojure_maven//:org_clojure_clojure",
          "@rules_clojure_maven//:org_clojure_spec_alpha",
          "@rules_clojure_maven//:org_clojure_core_specs_alpha",
          "@rules_clojure_maven//:org_clojure_tools_namespace",
          "@rules_clojure_maven//:org_clojure_tools_deps_alpha",
          "@rules_clojure_maven//:org_clojure_data_json",
          "fs"],
    runtime_deps=["fs"],
    aot=["clojure.java.classpath",
         "clojure.tools.deps.alpha.extensions",
         "clojure.tools.deps.alpha.util.session",
         "clojure.tools.deps.alpha.util.io",
         "clojure.tools.deps.alpha.util.dir",
         "clojure.tools.deps.alpha.util.concurrent",
         "clojure.tools.deps.alpha",
         "clojure.tools.reader.default-data-readers",
         "clojure.tools.reader.impl.commons",
         "clojure.tools.reader.impl.inspect",
         "clojure.tools.reader.impl.errors",
         "clojure.tools.reader.impl.utils",
         "clojure.tools.reader.reader-types",
         "clojure.tools.reader",
         "clojure.tools.namespace.parse",
         "clojure.tools.namespace.dependency",
         "clojure.tools.namespace.track",
         "clojure.tools.namespace.file",
         "clojure.tools.namespace.find",
         "rules-clojure.gen-build",
         "rules-clojure.parse"])

java_binary(name="gen_build",
            main_class="rules_clojure.gen_build",
            runtime_deps=[":libgen_build"])

clojure_library(name= "testrunner",
                srcs=["testrunner.clj"],
                resource_strip_prefix="src",
                aot=["rules-clojure.testrunner"],
                deps=["@rules_clojure_maven//:org_clojure_clojure"])

## files needed for the clj toolchain
filegroup(name="toolchain_files",
          srcs= glob(["*.clj"]) + ["//:deps.edn"])
